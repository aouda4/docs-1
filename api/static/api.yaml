openapi: 3.0.0
info:
  title: Open Inventory API
  version: 0.0.1
  contact:
    name: openinventoryorg
    email: openinventorysystem@gmail.com
  license:
    name: MIT
  description: This is the api endpoint documentation for Open Inventory project - an inventory management application created specifically for computer labs.
servers:
  - url: 'http://localhost:3000'
paths:
  /api/login:
    post:
      summary: Login using credentials
      tags:
        - Login
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT Token for the user
                  user:
                    $ref: '#/components/schemas/User'
                required:
                  - token
              examples:
                example:
                  value:
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjZjMzYzYTBiLTZhNjQtNDY5YS1iMDk4LTkyNTE1NzMzYTE2MyIsImZpcnN0TmFtZSI6IlN1bmVyYSIsImxhc3ROYW1lIjoiQXZpbmFzaCIsImVtYWlsIjoia2RzdW5lcmFhdmluYXNoQGdtYWlsLmNvbSIsInBlcm1pc3Npb25zIjpbIlJFUVVFU1RFUiJdLCJyb2xlIjoiU3R1ZGVudCIsInJvbGVJZCI6IjllN2NhYzA5LTJhYjMtNGQ3MC1iYTU4LWZhMTY1ZjhjYjQwMSIsImlhdCI6MTU4MzU5ODY5OX0.zvKDWbLZmxXKzBsvb_JF4pWiJyae15yEtux0pqvkM3g
                    user:
                      id: 6c363a0b-6a64-469a-b098-92515733a163
                      firstName: Sunera
                      lastName: Avinash
                      email: kdsuneraavinash@gmail.com
                      permissions:
                        - REQUESTER
                      role: Student
                      roleId: 9e7cac09-2ab3-4d70-ba58-fa165f8cb401
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: "Email isn't registered in the system"
      operationId: get-api-login
      description: Login a user using email and password.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
            examples:
              example:
                value:
                  email: admin@admin.com
                  password: password
        description: ''
  /api/registration/register:
    post:
      summary: Register an account
      operationId: post-api-registration-register
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: '"firstName" is required'
      description: Registers a user using the given token and details
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                password:
                  type: string
              required:
                - token
                - firstName
                - lastName
                - password
            examples:
              example:
                value:
                  token: pS_xf6FnP8T53sdX4Gw-J7s9.QfOlswnII9zfpIZAOqRj5bLXTI~kMsUe6yDH0JDnXzNTIDJJsQFscmAmDrGotie5G3I9Q_X
                  firstName: Demo
                  lastName: User
                  password: password
        description: ''
      tags:
        - Registration
  '/api/registration/verify/{token}':
    get:
      summary: Verify Registration Token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: Email Address of the token owner
                    format: email
                  roleId:
                    type: string
                    description: Role Id of the token owner
                    format: uuid
                  Role:
                    type: object
                    required:
                      - name
                    properties:
                      name:
                        type: string
                        description: Role name of the given token
                required:
                  - email
                  - roleId
                  - Role
              examples:
                example:
                  value:
                    email: admin@admin.com
                    roleId: beb4667e-20a5-4bc9-b2f5-5c9d1df1be55
                    Role:
                      name: Administrator
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Invalid token
      operationId: get-api-registration-verify
      description: Verify whether the registration token is valid. If valid returns email and assigned role.
      tags:
        - Registration
    parameters:
      - schema:
          type: string
        name: token
        in: path
        required: true
        description: Registration token of the user
  /api/registrar/roles:
    get:
      summary: List all available roles
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  roles:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
              examples:
                example:
                  value:
                    roles:
                      - id: 375840ad-2df8-45c9-aff7-eea54371487c
                        name: REQUESTER
                      - id: 40d1d03b-8305-45c3-ab9c-4d6c56022976
                        name: ADMINISTRATOR
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Insufficient permissions
      operationId: get-api-list-roles
      description: |-
        List all the roles

        > Required Permission Level: REGISTRAR
      tags:
        - Registrar
      security:
        - token: []
    parameters: []
  /api/registrar/token:
    put:
      summary: Create invite token for an email
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: '"role" must be a valid GUID'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Insufficient permissions
      operationId: get-api-registrar-token-generate
      description: |-
        Theis sends a request to generate a token for a specified address to create new account on the provided role. If the account is already created or if there is an already pending invite, this will also send an error status.


        > Required Permission Level: REGISTRAR
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requests:
                  $ref: '#/components/schemas/Registration-Role-Assign'
            examples:
              example:
                value:
                  email: user@gmail.com
                  role: 42647147-69d2-4c2b-8c3b-d3cc30dfdd97
        description: ''
      security:
        - token: []
      tags:
        - Registrar
    parameters: []
    delete:
      summary: Delete invite token for an email
      operationId: delete-api-registrar-token
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: User user@gmail.com is not sent an invitation link or ther user has created a account.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Insufficient permissions
      description: |-
        Theis sends a request to delete a token for a specified address. If the account is already created or if there isn't an already pending invite, this will also send an error status.


        > Required Permission Level: REGISTRAR
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
                - email
            examples:
              example:
                value:
                  email: gayal@gmail.com
        description: ''
      tags:
        - Registrar
  '/api/labs/{id}':
    put:
      summary: Create Lab by ID
      operationId: put-api-labs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'
              examples:
                example:
                  value:
                    id: 0ea2a3d3-37a4-4daf-b927-1af6d8b80201
                    title: First Lab
                    subtitle: hello world
                    updatedAt: '2020-03-14T22:48:01.969Z'
                    createdAt: '2020-03-14T22:48:01.969Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Lab 0ea2a3d3-37a4-4daf-b927-1af6d8b80201 already exists.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Insufficient permissions
      description: |-
        This creates a lab with the given id and data. This will send an error if data is invalid or the lab already exists.

        > Required Permission Level: ADMINISTRATOR
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabRequest'
            examples:
              example:
                value:
                  title: First Lab
                  subtitle: hello world
        description: ''
      tags:
        - Labs
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
        description: Id of the lab
    patch:
      summary: Update Lab Data
      operationId: patch-api-labs-id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'
              examples:
                example:
                  value:
                    id: 0ea2a3d3-37a4-4daf-b927-1af6d8b80201
                    title: Updated First Lab
                    subtitle: hello world
                    image: null
                    createdAt: '2020-03-14T22:48:01.969Z'
                    updatedAt: '2020-03-14T22:58:48.900Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Lab 0ea2a3d3-37a4-4daf-b927-1af6d8b8020d does not exist.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Insufficient permissions
      description: |-
        This updates a lab with the given id and data. This will send an error if data is invalid or the lab does not exist.

        > Required Permission Level: ADMINISTRATOR
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabRequest'
            examples:
              example:
                value:
                  title: First Lab
                  subtitle: hello world
          application/xml:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the lab
                subtitle:
                  type: string
                  description: Subtitle of the lab
                image:
                  type: string
                  format: uri
                  description: Image URL of the lab
              required:
                - title
                - subtitle
            examples:
              example:
                value:
                  title: Updated First Lab
                  subtitle: hello world
        description: ''
      tags:
        - Labs
    delete:
      summary: Delete Lab
      operationId: delete-api-labs-id
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Lab 0ea2a3d3-37a4-4daf-b927-1af6d8b8020d does not exist.
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Insufficient permissions
      description: |-
        This deletes a lab with the given id. This will send an error if data is invalid or the lab does not exist.

        > Required Permission Level: ADMINISTRATOR
      security:
        - token: []
      tags:
        - Labs
  /api/labs/create:
    post:
      summary: Create Lab
      operationId: post-api-labs-create
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lab'
              examples:
                example:
                  value:
                    id: 424b82a3-025c-48ad-8961-8400a0d43307
                    title: Second Lab
                    subtitle: hello world
                    image: null
                    updatedAt: '2020-03-14T23:10:32.525Z'
                    createdAt: '2020-03-14T23:10:32.525Z'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabRequest'
              examples:
                example:
                  value:
                    message: '"title" is required'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    message: Insufficient permissions
      description: |-
        Creates a new lab with the given data.
        ID will be auto assigned.

        > Required Permission Level: ADMINISTRATOR
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LabRequest'
            examples:
              example:
                value:
                  title: Second Lab
                  subtitle: hello world
      tags:
        - Labs
  /api/labs/list:
    get:
      summary: List all Labs
      tags:
        - Labs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  labs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Lab'
              examples:
                example:
                  value:
                    labs:
                      - id: 0ea2a3d3-37a4-4daf-b927-1af6d8b80201
                        title: Updated First Lab
                        subtitle: hello world
                        image: null
                        createdAt: '2020-03-14T22:48:01.969Z'
                        updatedAt: '2020-03-14T22:58:48.900Z'
                      - id: 424b82a3-025c-48ad-8961-8400a0d43307
                        title: Second Lab
                        subtitle: hello world
                        image: null
                        createdAt: '2020-03-14T23:10:32.525Z'
                        updatedAt: '2020-03-14T23:10:32.525Z'
      operationId: get-api-labs-list
      description: Lists all labs in the system
  /api/login/verify:
    get:
      summary: Verify login token
      tags:
        - Login
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
      operationId: get-api-login-verify
      security:
        - token: []
      description: Verifies the token used to access this endpoint. This gives 200 status if authenticated. Otherwise this gives 401 status.
components:
  schemas:
    Role:
      title: Role
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - id
        - name
    Error:
      title: Error
      type: object
      properties:
        message:
          type: string
          description: Error Message
      required:
        - message
      x-examples: {}
      description: ''
    Registration-Role-Assign:
      title: Registration Token Generation Request
      type: object
      x-examples: {}
      description: ''
      properties:
        email:
          type: string
          description: Email address to be sent the registration token
          format: email
        role:
          type: string
          description: Initial role for the account created by email address
          format: uuid
      required:
        - email
        - role
    User:
      title: User
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        permissions:
          type: array
          items:
            type: string
        role:
          type: string
        roleId:
          type: string
          format: uuid
      required:
        - id
        - firstName
        - lastName
        - email
        - permissions
        - role
        - roleId
    Lab:
      title: Lab
      type: object
      description: Lab Object
      x-examples: {}
      properties:
        id:
          type: string
          format: uuid
          description: Id of the lab
        title:
          type: string
          description: Title of the lab
        subtitle:
          type: string
          description: Subtitle of the lab
        image:
          type: string
          description: Image URL of the lab
          format: uri
        updatedAt:
          type: string
          format: date-time
          description: Object creation date
        createdAt:
          type: string
          format: date-time
          description: Object last update date
      required:
        - id
        - title
        - subtitle
    LabRequest:
      title: Lab Request
      type: object
      description: Lab Object used to request creation/updating
      properties:
        title:
          type: string
          description: Title of the lab
        subtitle:
          type: string
          description: Subtitle of the lab
        image:
          type: string
          description: Image URL of the lab
          format: uri
      required:
        - title
        - subtitle
      x-examples: {}
  securitySchemes:
    token:
      name: token
      type: apiKey
      in: header
      description: JWT Token for the user
tags:
  - name: Registration
  - name: Login
  - name: Registrar
  - name: Labs
